{"ast":null,"code":"import { registerUser } from '../api/auth'; // Importa la función de registro\n\nexport default {\n  data() {\n    return {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      errorMessage: \"\"\n    };\n  },\n  methods: {\n    async registerUserHandler() {\n      // Validar que las contraseñas coincidan\n      if (this.password !== this.confirmPassword) {\n        this.errorMessage = \"Las contraseñas no coinciden.\";\n        return;\n      }\n      try {\n        // Llamar a la función de registro\n        const result = await registerUser({\n          username: this.username,\n          email: this.email,\n          password: this.password\n        });\n\n        // Registro exitoso\n        alert(\"¡Registro exitoso! Revisa tu correo para confirmar tu cuenta.\");\n        this.resetForm();\n        this.$emit(\"registerSuccess\", result);\n      } catch (error) {\n        // Manejo de errores\n        this.errorMessage = error.response?.data?.error || \"Error en el registro. Por favor, intenta nuevamente.\";\n      }\n    },\n    resetForm() {\n      // Reiniciar los campos del formulario\n      this.username = \"\";\n      this.email = \"\";\n      this.password = \"\";\n      this.confirmPassword = \"\";\n      this.errorMessage = \"\";\n    }\n  }\n};","map":{"version":3,"names":["registerUser","data","username","email","password","confirmPassword","errorMessage","methods","registerUserHandler","result","alert","resetForm","$emit","error","response"],"sources":["C:\\Users\\matia\\OneDrive\\Escritorio\\Prueba tecnica CTS Turismo\\cts_frontend\\src\\components\\RegisterForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"form-container\">\r\n    <h2>Registro</h2>\r\n    <div id=\"error-message\" class=\"error\" v-if=\"errorMessage\">{{ errorMessage }}</div>\r\n    <form @submit.prevent=\"registerUserHandler\">\r\n      <input type=\"text\" v-model=\"username\" placeholder=\"Nombre de usuario\" required />\r\n      <input type=\"email\" v-model=\"email\" placeholder=\"Correo electrónico\" required />\r\n      <input type=\"password\" v-model=\"password\" placeholder=\"Contraseña\" required />\r\n      <input type=\"password\" v-model=\"confirmPassword\" placeholder=\"Confirmar contraseña\" required />\r\n      <button type=\"submit\">Registrarse</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { registerUser } from '../api/auth'; // Importa la función de registro\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      errorMessage: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    async registerUserHandler() {\r\n      // Validar que las contraseñas coincidan\r\n      if (this.password !== this.confirmPassword) {\r\n        this.errorMessage = \"Las contraseñas no coinciden.\";\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Llamar a la función de registro\r\n        const result = await registerUser({\r\n          username: this.username,\r\n          email: this.email,\r\n          password: this.password,\r\n        });\r\n\r\n        // Registro exitoso\r\n        alert(\"¡Registro exitoso! Revisa tu correo para confirmar tu cuenta.\");\r\n        this.resetForm();\r\n        this.$emit(\"registerSuccess\", result);\r\n      } catch (error) {\r\n        // Manejo de errores\r\n        this.errorMessage = error.response?.data?.error || \"Error en el registro. Por favor, intenta nuevamente.\";\r\n      }\r\n    },\r\n    resetForm() {\r\n      // Reiniciar los campos del formulario\r\n      this.username = \"\";\r\n      this.email = \"\";\r\n      this.password = \"\";\r\n      this.confirmPassword = \"\";\r\n      this.errorMessage = \"\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n  \r\n<style scoped>\r\nbody {\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f4f4f9;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.form-container {\r\n  background: #ffffff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n  width: 100%;\r\n  max-width: 400px;\r\n  margin: 50px auto;\r\n}\r\n\r\n.form-container h2 {\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n  font-size: 24px;\r\n  color: #333;\r\n}\r\n\r\n.form-container input {\r\n  width: 100%;\r\n  padding: 12px;\r\n  margin: 10px 0;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.form-container button {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #5cb85c;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.form-container button:hover {\r\n  background-color: #4cae4c;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  margin-bottom: 15px;\r\n}\r\n</style>\r\n\r\n  "],"mappings":"AAeA,SAASA,YAAW,QAAS,aAAa,EAAE;;AAE5C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MACnBC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,mBAAmBA,CAAA,EAAG;MAC1B;MACA,IAAI,IAAI,CAACJ,QAAO,KAAM,IAAI,CAACC,eAAe,EAAE;QAC1C,IAAI,CAACC,YAAW,GAAI,+BAA+B;QACnD;MACF;MAEA,IAAI;QACF;QACA,MAAMG,MAAK,GAAI,MAAMT,YAAY,CAAC;UAChCE,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC,CAAC;;QAEF;QACAM,KAAK,CAAC,+DAA+D,CAAC;QACtE,IAAI,CAACC,SAAS,CAAC,CAAC;QAChB,IAAI,CAACC,KAAK,CAAC,iBAAiB,EAAEH,MAAM,CAAC;MACvC,EAAE,OAAOI,KAAK,EAAE;QACd;QACA,IAAI,CAACP,YAAW,GAAIO,KAAK,CAACC,QAAQ,EAAEb,IAAI,EAAEY,KAAI,IAAK,sDAAsD;MAC3G;IACF,CAAC;IACDF,SAASA,CAAA,EAAG;MACV;MACA,IAAI,CAACT,QAAO,GAAI,EAAE;MAClB,IAAI,CAACC,KAAI,GAAI,EAAE;MACf,IAAI,CAACC,QAAO,GAAI,EAAE;MAClB,IAAI,CAACC,eAAc,GAAI,EAAE;MACzB,IAAI,CAACC,YAAW,GAAI,EAAE;IACxB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}