{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { setPassword } from '../api/auth'; // Importa la función para enviar la contraseña al backend\n\nexport default {\n  data() {\n    return {\n      password: '',\n      confirmPassword: '',\n      errorMessage: '',\n      successMessage: '',\n      countdown: 5,\n      // Inicializa el contador en 5 segundos\n      uidb64: null,\n      // Para almacenar uidb64 de la URL\n      token: null // Para almacenar token de la URL\n    };\n  },\n  created() {\n    // Captura los parámetros desde la URL\n    this.uidb64 = this.$route.query.uidb64;\n    this.token = this.$route.query.token;\n    if (!this.uidb64 || !this.token) {\n      this.errorMessage = 'Parámetros inválidos en el enlace.';\n    }\n  },\n  methods: {\n    async handleSubmit() {\n      if (this.password !== this.confirmPassword) {\n        this.errorMessage = 'Las contraseñas no coinciden.';\n        return;\n      }\n      try {\n        const response = await setPassword({\n          uidb64: this.uidb64,\n          token: this.token,\n          password: this.password\n        });\n        this.successMessage = response.message;\n        this.errorMessage = '';\n\n        // Inicia el contador regresivo\n        const interval = setInterval(() => {\n          if (this.countdown > 0) {\n            this.countdown -= 1;\n          } else {\n            clearInterval(interval); // Detiene el contador\n            this.$router.push('/login'); // Redirige al login\n          }\n        }, 1000); // Disminuye el contador cada segundo\n      } catch (error) {\n        this.successMessage = '';\n        this.errorMessage = error.response?.data?.error || 'Error al establecer la contraseña.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["setPassword","data","password","confirmPassword","errorMessage","successMessage","countdown","uidb64","token","created","$route","query","methods","handleSubmit","response","message","interval","setInterval","clearInterval","$router","push","error"],"sources":["C:\\Users\\matia\\OneDrive\\Escritorio\\Prueba tecnica CTS Turismo\\cts_frontend\\src\\components\\CreatePasswordForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"create-password-container\">\r\n    <div class=\"form-container\">\r\n      <h2>Crear Nueva Contraseña</h2>\r\n      <form @submit.prevent=\"handleSubmit\">\r\n        <input\r\n          type=\"password\"\r\n          v-model=\"password\"\r\n          placeholder=\"Nueva contraseña\"\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          v-model=\"confirmPassword\"\r\n          placeholder=\"Confirmar contraseña\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Guardar Contraseña</button>\r\n      </form>\r\n      <div v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</div>\r\n      <div v-if=\"successMessage\" class=\"success\">\r\n        {{ successMessage }}\r\n        <p>Serás redirigido al inicio de sesión en {{ countdown }} segundos...</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { setPassword } from '../api/auth'; // Importa la función para enviar la contraseña al backend\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      password: '',\r\n      confirmPassword: '',\r\n      errorMessage: '',\r\n      successMessage: '',\r\n      countdown: 5, // Inicializa el contador en 5 segundos\r\n      uidb64: null, // Para almacenar uidb64 de la URL\r\n      token: null, // Para almacenar token de la URL\r\n    };\r\n  },\r\n  created() {\r\n    // Captura los parámetros desde la URL\r\n    this.uidb64 = this.$route.query.uidb64;\r\n    this.token = this.$route.query.token;\r\n\r\n    if (!this.uidb64 || !this.token) {\r\n      this.errorMessage = 'Parámetros inválidos en el enlace.';\r\n    }\r\n  },\r\n  methods: {\r\n    async handleSubmit() {\r\n      if (this.password !== this.confirmPassword) {\r\n        this.errorMessage = 'Las contraseñas no coinciden.';\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await setPassword({\r\n          uidb64: this.uidb64,\r\n          token: this.token,\r\n          password: this.password,\r\n        });\r\n\r\n        this.successMessage = response.message;\r\n        this.errorMessage = '';\r\n\r\n        // Inicia el contador regresivo\r\n        const interval = setInterval(() => {\r\n          if (this.countdown > 0) {\r\n            this.countdown -= 1;\r\n          } else {\r\n            clearInterval(interval); // Detiene el contador\r\n            this.$router.push('/login'); // Redirige al login\r\n          }\r\n        }, 1000); // Disminuye el contador cada segundo\r\n      } catch (error) {\r\n        this.successMessage = '';\r\n        this.errorMessage =\r\n          error.response?.data?.error || 'Error al establecer la contraseña.';\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.create-password-container {\r\n  background: url('../assets/pareja.jpg') no-repeat center center fixed; /* Ruta de tu imagen */\r\n  background-size: cover; /* Asegura que la imagen cubra toda la pantalla */\r\n  height: 100vh; /* Altura completa de la pantalla */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.form-container {\r\n  background-color: rgba(255, 255, 255, 0.8); /* Fondo blanco translúcido */\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\r\n  text-align: center;\r\n}\r\n\r\ninput {\r\n  width: 90%;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\n\r\nbutton {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n\r\n.success {\r\n  color: green;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":";AA6BA,SAASA,WAAU,QAAS,aAAa,EAAE;;AAE3C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MACnBC,YAAY,EAAE,EAAE;MAChBC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE,CAAC;MAAE;MACdC,MAAM,EAAE,IAAI;MAAE;MACdC,KAAK,EAAE,IAAI,CAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACF,MAAK,GAAI,IAAI,CAACG,MAAM,CAACC,KAAK,CAACJ,MAAM;IACtC,IAAI,CAACC,KAAI,GAAI,IAAI,CAACE,MAAM,CAACC,KAAK,CAACH,KAAK;IAEpC,IAAI,CAAC,IAAI,CAACD,MAAK,IAAK,CAAC,IAAI,CAACC,KAAK,EAAE;MAC/B,IAAI,CAACJ,YAAW,GAAI,oCAAoC;IAC1D;EACF,CAAC;EACDQ,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI,IAAI,CAACX,QAAO,KAAM,IAAI,CAACC,eAAe,EAAE;QAC1C,IAAI,CAACC,YAAW,GAAI,+BAA+B;QACnD;MACF;MAEA,IAAI;QACF,MAAMU,QAAO,GAAI,MAAMd,WAAW,CAAC;UACjCO,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBN,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC,CAAC;QAEF,IAAI,CAACG,cAAa,GAAIS,QAAQ,CAACC,OAAO;QACtC,IAAI,CAACX,YAAW,GAAI,EAAE;;QAEtB;QACA,MAAMY,QAAO,GAAIC,WAAW,CAAC,MAAM;UACjC,IAAI,IAAI,CAACX,SAAQ,GAAI,CAAC,EAAE;YACtB,IAAI,CAACA,SAAQ,IAAK,CAAC;UACrB,OAAO;YACLY,aAAa,CAACF,QAAQ,CAAC,EAAE;YACzB,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;UAC/B;QACF,CAAC,EAAE,IAAI,CAAC,EAAE;MACZ,EAAE,OAAOC,KAAK,EAAE;QACd,IAAI,CAAChB,cAAa,GAAI,EAAE;QACxB,IAAI,CAACD,YAAW,GACdiB,KAAK,CAACP,QAAQ,EAAEb,IAAI,EAAEoB,KAAI,IAAK,oCAAoC;MACvE;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}